- name: 创建工作目录和子目录
  file:
    dest: "{{ k8s_work_dir }}/{{ item }}"
    state: directory
  loop:
    - bin
    - cfg
    - ssl
    - logs

- name: 创建etcd证书目录
  file:
    dest: "{{ k8s_work_dir }}/ssl/etcd"
    state: directory

- name: 创建临时目录
  file:
    dest: "{{ tmp_dir }}"
    state: directory

- name: 分发并解压k8s二进制包
  unarchive:
    src: "{{ item }}"
    dest: "{{ tmp_dir }}"
    creates: "{{ tmp_dir }}/kubernetes/server/"
  with_fileglob:
    - "{{ software_dir }}/kubernetes-*.tar.gz"

- name: 移动k8s master二进制文件
  shell: |
    for bin in kube-apiserver kube-controller-manager kube-scheduler; do
      cp -rf {{ tmp_dir }}/kubernetes/server/bin/$bin {{ k8s_work_dir }}/bin
    done &&
    cp -rf {{ tmp_dir }}/kubernetes/server/bin/kubectl /usr/bin


- name: 分发k8s证书
  copy:
    src: "k8s_cert/{{ item }}"
    dest: "{{ k8s_work_dir }}/ssl"
  with_items:
    - ca.pem
    - ca-key.pem
    - server.pem
    - server-key.pem
    - kube-controller-manager.pem
    - kube-controller-manager-key.pem
    - kube-scheduler.pem
    - kube-scheduler-key.pem
    - admin.pem
    - admin-key.pem
    - serviceaccount-key.pem
    - serviceaccount.pem

- name: 分发etcd证书
  copy:
    src: "etcd_cert/{{ item }}"
    dest: "{{ k8s_work_dir }}/ssl/etcd"
  with_items:
    - ca.pem
    - server.pem
    - server-key.pem

- name: 分发k8s配置文件
  template:
    src: "{{ item }}"
    dest: "{{ k8s_work_dir }}/cfg/{{ item.split('.')[:-1]|join('.') }}"
  loop:
    - kube-apiserver.conf.j2
    - kube-controller-manager.conf.j2
    - kube-scheduler.conf.j2
    - kube-controller-manager.kubeconfig.j2
    - kube-scheduler.kubeconfig.j2
    - token.csv.j2

- name: 分发service文件
  template:
    src: "{{ item }}"
    dest: "/usr/lib/systemd/system/{{ item.split('.')[:-1]|join('.') }}"
  loop:
    - kube-apiserver.service.j2
    - kube-controller-manager.service.j2
    - kube-scheduler.service.j2

- name: 启动k8s master组件
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: 创建kubectl配置文件目录
  file:
    dest: /root/.kube
    state: directory

- name: 分发k8s配置文件
  template:
    src: config.j2
    dest: /root/.kube/config
    mode: '0600'

- name: 查看集群状态
  command: kubectl get cs
  register: cs
  changed_when: false

- debug:
    var: cs.stdout_lines

- name: 拷贝RBAC文件
  copy:
    src: "{{ item }}"
    dest: "{{ tmp_dir }}"
  loop:
    - kubelet-bootstrap-rbac.yaml
    - apiserver-to-kubelet-rbac.yaml

- name: 授权APIServer访问Kubelet与授权kubelet bootstrap
  shell: |
    kubectl apply -f {{ tmp_dir }}/apiserver-to-kubelet-rbac.yaml
    kubectl apply -f {{ tmp_dir }}/kubelet-bootstrap-rbac.yaml
  ignore_errors: yes

- name: 自动审批Kubelet证书
  shell: |
    kubectl create clusterrolebinding node-client-auto-approve-csr --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --user=kubelet-bootstrap 
    kubectl create clusterrolebinding node-client-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes 
    kubectl create clusterrolebinding node-server-auto-renew-crt --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver --group=system:nodes
    touch /tmp/kubectl.lock
  args:
    creates: /tmp/kubectl.lock
  ignore_errors: yes

- name: kubernetes自动补全命令
  lineinfile:
    path: "{{'/etc/bashrc' if ansible_facts['distribution'] == 'CentOS' else '/etc/bash.bashrc' }}"
    regexp: 'kubectl completion'
    line: "source <(kubectl completion bash)"
    state: present
    backup: yes
