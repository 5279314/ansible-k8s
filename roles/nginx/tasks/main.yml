- name: 创建临时目录
  file:
    dest: "{{ tmp_dir }}"
    state: directory
    mode: '0755'
- name: 检查是否是CentOS
  stat:
    path: /etc/redhat-release
  register: redhat_release

- name: 检查是否是Ubuntu
  stat:
    path: /etc/os-release
  register: os_release
# 安装Nginx相关依赖环境（支持CentOS和Ubuntu）
- name: 安装Nginx依赖（CentOS/RHEL）
  yum:
    name: "{{ centos_packages }}"
    state: present
  when: redhat_release.stat.exists
  vars:
    centos_packages:
      - openssl-devel
      - pcre-devel
      - gcc
      - libxml2-devel
      - libxslt-devel

- name: 安装Nginx依赖（Ubuntu/Debian）
  apt:
    name: "{{ ubuntu_packages }}"
    state: present
    update_cache: yes
  when: os_release.stat.exists
  vars:
    ubuntu_packages:
      - libssl-dev    # 对应CentOS的openssl-devel
      - libpcre3-dev  # 对应CentOS的pcre-devel
      - build-essential  # 包含gcc等编译工具
      - libxml2-dev   # 对应CentOS的libxml2-devel
      - libxslt1-dev  # 对应CentOS的libxslt-devel
      - zlib1g-dev
- name: 创建 Nginx 用户组
  group:
    name: "{{ Ngx_Group }}"
    gid: "{{ Ngx_Gid }}"
    system: yes

- name: 创建 Nginx 用户
  user:
    name: "{{ Ngx_User }}"
    group: "{{ Ngx_Group }}"
    uid: "{{ Ngx_Uid }}"
    system: yes
    shell: /sbin/nologin
    create_home: no

- name: 分发解压 Nginx 软件包
  unarchive:
    src: "{{ software_dir }}/{{ nginx_ver }}.tar.gz"
    dest: "{{ tmp_dir }}"
    creates: "{{ tmp_dir }}/{{ nginx_ver }}"
- name: 编译安装 Nginx （时间较长）
  shell:
    chdir: "{{ tmp_dir }}/{{ nginx_ver }}"
    cmd: >
       ./configure 
       --prefix={{ install_dir}}/{{ nginx_ver }} 
       --sbin-path={{ sbin_path }}
       --conf-path={{ conf_path }} 
       --error-log-path={{ error_log }} 
       --http-log-path={{ http_log }} 
       --user={{ Ngx_User }} 
       --group={{ Ngx_Group }} 
       --with-compat --with-debug 
       --with-file-aio 
       --with-http_addition_module 
       --with-http_auth_request_module 
       --with-http_dav_module 
       --with-http_degradation_module 
       --with-http_flv_module 
       --with-http_gunzip_module 
       --with-http_gzip_static_module 
       --with-http_mp4_module  
       --with-http_random_index_module 
       --with-http_realip_module 
       --with-http_secure_link_module 
       --with-http_slice_module 
       --with-http_ssl_module 
       --with-http_stub_status_module 
       --with-http_sub_module 
       --with-http_v2_module 
       --with-http_xslt_module=dynamic 
       --with-mail=dynamic 
       --with-mail_ssl_module 
       --with-pcre 
       --with-pcre-jit 
       --with-stream
       --with-stream=dynamic 
       --with-stream_ssl_module 
       --with-stream_ssl_preread_module
       --with-threads 
       &&
       make;make install
    creates: "{{ install_dir }}/{{ nginx_ver }}"
- name: 创建 Nginx 配置目录
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - '/etc/nginx/certs/'
    - '/etc/nginx/conf.d/'

- name: 分发Nginx 配置文件
  template:
    src: "{{ item }}"
    dest: "{% if item.startswith('nginx') %}/etc/nginx/{{ item.split('.')[:-1]|join('.') }}{% else %}/etc/nginx/conf.d/{{ item.split('.')[:-1]|join('.') }}{% endif %}"
  with_items:
    - nginx.conf.j2
    - dashboard.conf.j2
    - domain.conf.j2

- name: 检查Nginx配置文件
  command: /usr/sbin/nginx -t
  register: check_nginx
  changed_when: ( check_nginx.stdout.find('successful') )

- name: 添加systemd启动管理
  template:
    src: nginx.service.j2
    dest: /usr/lib/systemd/system/nginx.service

- name: 启动Nginx 服务
  systemd:
    name: nginx
    state: restarted
    enabled: yes
    daemon_reload: yes
